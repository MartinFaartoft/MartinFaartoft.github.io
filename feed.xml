<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ftft</title>
    <atom:link href="http:ftft.dk/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http:ftft.dk</link>
    <description>If I write it down I don't have to remember it</description>
    <pubDate>Thu, 03 Oct 2013 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Introduction</title>
      <link>http:ftft.dk/articles/introduction/</link>
      <pubDate>Thu, 03 Oct 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http:ftft.dk/articles/introduction/</guid>
      <author></author>
      <description>&lt;p&gt;In which we find out what the point of this whole thing is.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I am currently studying an MSc in Computer Science. Part of the mandatory curriculum is a course called ‘Global Software Development’, in which groups of students from different countries, are tasked with writing non-trivial software systems in a programming language called Eiffel.&lt;/p&gt;
&lt;p&gt;I know next to nothing about Eiffel.&lt;/p&gt;
&lt;p&gt;Eiffel is an old, and somewhat obscure language. Google searches usually come back with results related to the tower in Paris, or if you are really lucky, with a result related to your problem, explaining how to solve it in Eiffel version 6.x, when the syntax was significantly different. (current version is 7.3).&lt;/p&gt;
&lt;p&gt;So to make the Internet an infinitesimally better place, I will write a series of posts about how to program in Eiffel 7.3.&lt;/p&gt;
&lt;p&gt;Apologies in advance for all the things I will get wrong. I&amp;#39;m learning this stuff as I go along.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>http:ftft.dk/articles/getting-started/</link>
      <pubDate>Thu, 03 Oct 2013 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http:ftft.dk/articles/getting-started/</guid>
      <author></author>
      <description>&lt;p&gt;In which we install Eiffel Studio and look closely at the Hello World example.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;Getting Started&lt;/h1&gt;
&lt;h2&gt;Installing Eiffel Studio 7.3&lt;/h2&gt;
&lt;p&gt;Go and grab &lt;a href=&quot;https://www2.eiffel.com/download/download_info.aspx?id=eiffelstudio&amp;amp;info=false&amp;amp;mirrors=eiffelstudio&quot;&gt;Eiffel Studio 7.3&lt;/a&gt; (requires a free account, but at the time of writing, your friends at &lt;a href=&quot;http://www.bugmenot.com/&quot;&gt;bugmenot&lt;/a&gt; have got you covered).&lt;/p&gt;
&lt;p&gt;Installation on Windows is straightforward. If you wanna install it on mac, be warned - nobody in our class, instructors included, could get it to run on OS X in a stable manner. It works just fine on a virtual machine though.&lt;/p&gt;
&lt;p&gt;After installing, you should be able to start Eiffel Studio and get a screen looking somewhat like this one: &lt;img src=&quot;http:ftft.dk/articles/getting-started/le_image.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Hello World&lt;/h2&gt;
&lt;p&gt;Go ahead and create a new Basic Application, this should generate a new project for you, with the following &lt;em&gt;APPLICATION&lt;/em&gt; class (Eiffel classnames are all uppercase)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;note
    description : &amp;quot;foo application root class&amp;quot;
    date        : &amp;quot;$Date$&amp;quot;
    revision    : &amp;quot;$Revision$&amp;quot;

class
    APPLICATION

inherit
    ARGUMENTS

create
    make

feature {NONE} -- Initialization

    make
            -- Run application.
        do
            --| Add your code here
            print (&amp;quot;Hello Eiffel World!%N&amp;quot;)
        end

end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now click the Run icon, and watch the output window pop open. So far so good!&lt;/p&gt;
&lt;p&gt;Taking a quick look at the &lt;em&gt;APPLICATION&lt;/em&gt; class, let&amp;#39;s see what we can divine.&lt;/p&gt;
&lt;p&gt;The note part in the beginning seems to be optional, there might be built-in tools that will parse the key-value pairs up there, but I don&amp;#39;t know any.&lt;/p&gt;
&lt;p&gt;The classname is preceded by the keyword &lt;em&gt;class&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Our class inherits from the class &lt;em&gt;ARGUMENTS&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;create&lt;/em&gt; keyword tells which of the class members that are constructors - in our case &lt;em&gt;make&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The feature {NONE} part looks scary, let us not tackle that just yet. But inside it, is our constructor &lt;em&gt;make&lt;/em&gt;, along with some friendly comments.&lt;/p&gt;
&lt;p&gt;Method bodies are enclosed in a &lt;em&gt;do&lt;/em&gt; &lt;em&gt;end&lt;/em&gt; pair, and the &lt;em&gt;make&lt;/em&gt; method here simply prints a string to standard output.&lt;/p&gt;
&lt;p&gt;Finally the &lt;em&gt;end&lt;/em&gt; marks the end of the APPLICATION class. Doesn&amp;#39;t look too bad.&lt;/p&gt;
&lt;p&gt;Random thoughts from playing with Hello World:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;%&lt;/em&gt; is the character escape sequence&lt;/li&gt;
&lt;li&gt;single line comments start with &lt;em&gt;—&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Eiffel is not overly sensitive to whitespace, linebreaks and tab indents do not carry any meaning (think Java or C#).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next up: Flow control and more syntax!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>